@using Services.Helpers
@model SubjectViewModel

@section Head
{
    <link asp-append-version="true" rel="stylesheet" href="css/style4.css"></link>
}

@{
    // metod component oldu
}

<div class="headings d-flex justify-content-between align-items-center mb-3">
    <div>
        <h6 class="mt-1"><span class="badge bg-secondary">@Model.Category.CategoryName</span></h6>
        <h4><strong>@Model.Subject.Title</strong></h4>
        <p><i class="fa fa-user"></i> @Model.UserName 
            · <i class="fa fa-clock-o" aria-hidden="true"></i> @await Component.InvokeAsync("ShowTime",Model.CreatedAt)
            · <i class="fa fa-reply" aria-hidden="true"></i> <span id="commentCount"> @Model.CommentCount </span></p>
    </div>
    
    <div class="buttons">
        <span class="badge bg-white d-flex flex-row align-items-center">
            <div class="btn-group">
                <a href="" class="btn btn-success">Paylaş</a>
            </div>
        </span>
    </div>
</div>


<div class="row">
    <div class="col-lg-8">
        <div class="row  d-flex justify-content-center">
            
            <div class="d-flex flex-column" id="comment-container">
                <div class="bg-white">
                    <div id="err" class="text-danger mb-2"></div>
                    <div class="flex-row d-flex">
                        <img src="dp.jpg" width="40" class="rounded-circle">
                        <div class="d-flex flex-column justify-content-start ml-2">
                            <span class="d-block font-weight-bold name">@Model.UserName</span>
                            <span class="date text-black-50">Katılma Tarihi : @Model.CreatedAt.ToString("d")</span>
                            <span class="date text-black-50">Mesaj Sayısı : @Model.UserCommentCount</span>
                        </div>
                    </div>
                    <div class="mt-3">
                        <p class="comment-text">@Model.Subject.Content</p>
                    </div>
                </div>
                <div class="bg-white">
                    @{
                        var user = await Component.InvokeAsync("CheckSubjectUser", @Model.Subject.SubjectId);
                        var content = HtmlContentToString.ConvertHtmlContentToString(user);
                    }
                    
                    @if (content == "false")
                    {
                        <div class="d-flex flex-row fs-14">
                            <div class="p-2 cursor p-2">
                                <a id="subject_like"
                                   data-toggle="tooltip"
                                   data-popper-placement="top"
                                   title="Beğen">
                                    <i id="like_icon" class="fa fa-thumbs-o-up @(Model.isLiked ? "text-primary" : "")"></i>
                                    <span id="likecount">@Model.likeCount</span>

                                </a>
                            </div>
                            <div class="p-2 cursor p-2">
                                <a
                                    id="subject_dislike"
                                    data-toggle="tooltip"
                                    data-popper-placement="top"
                                    title="Beğenme">
                                    <i id="dislike_icon" class="fa fa-thumbs-o-down @(Model.isdisLiked ? "text-danger" : "")"></i>

                                    <span id="dislikecount">@Model.dislikeCount</span>

                                </a>
                            </div>
                            <div class="p-2 cursor p-2">
                                <a
                                    id="subject_heart"
                                    data-toggle="tooltip"
                                    data-popper-placement="top"
                                    title="Kalp">
                                    <i id="heart_icon" class="fa fa-heart @(Model.isheart ? "text-warning" : "")"></i>

                                    <span id="heartcount">@Model.heartCount</span>
                                </a>
                            </div>

                            <!--<div class="p-2 cursor p-2">
                                <i class="fa fa-comment"></i><span class="ml-1">Reply</span>
                            </div>-->
                            <!--<div class="p-2 cursor p-2">
                                <i class="fa fa-share"></i><span class="ml-1">Share</span>
                            </div>-->
                        </div>
                    }

                    <div class="text-muted">@await Component.InvokeAsync("ShowTime", Model.Subject.CreatedAt)</div>
                    
                    @{
                        int limitcount = 5;
                        int totalcount = @Model.UserSubjectLdh.disLikedUsers.Count() 
                                         + @Model.UserSubjectLdh.LikedUsers.Count()
                                         + @Model.UserSubjectLdh.HeartUsers.Count();
                    }
                    
                    <div class=" border p-3 mt-2 rounded-2">
                        @Html.Raw((Model.likeCount != 0 ? "<i class=\"fa fa-thumbs-o-up text-primary\"></i>" : ""))
                        @Html.Raw((Model.dislikeCount != 0 ? "<i class=\"fa fa-thumbs-o-down text-danger\"></i>" : ""))
                        @Html.Raw((Model.heartCount != 0 ? "<i class=\"fa fa-heart text-warning\"></i>" : ""))
                        @if (Model.UserSubjectLdh.LikedUsers.Count() != 0)
                        {
                            var countlike = Model.UserSubjectLdh.LikedUsers.Count();
                            limitcount -= countlike; 
                            if (countlike <= 5)
                            {
                                @string.Join(", ", Model.UserSubjectLdh.LikedUsers)
                            }
                            else
                            {
                                limitcount = 0;
                                for (int i = 0; i < 5; i++)
                                {
                                    <text>@Model.UserSubjectLdh.LikedUsers[i]</text>
                                    if (i < 4) { <text>, </text> }
                                }  
                            }
                        }
                        
                        @if (Model.UserSubjectLdh.disLikedUsers.Count() != 0 && limitcount != 0)
                        {
                            if(limitcount != 5) {<text>, </text>}
                            var countdislike = Model.UserSubjectLdh.disLikedUsers.Count();
                            limitcount -= countdislike; 
                            if (countdislike <= limitcount)
                            {
                                @string.Join(", ", Model.UserSubjectLdh.disLikedUsers)
                            }
                            else
                            {
                                for (int i = 0; i < limitcount; i++)
                                {
                                    <text>@Model.UserSubjectLdh.disLikedUsers[i]</text>
                                    if (i < limitcount - 1) { <text>, </text> }

                                }
                            }
                        }
                        
                        @if (Model.UserSubjectLdh.HeartUsers.Count() != 0 && limitcount != 0)
                        {
                            if(limitcount != 5) {<text>, </text>}
                            var countheart = Model.UserSubjectLdh.HeartUsers.Count();
                            limitcount -= countheart; 
                            if (countheart <= limitcount)
                            {
                                @string.Join(", ", Model.UserSubjectLdh.HeartUsers)
                            }
                            else
                            {
                                for (int i = 0; i < limitcount; i++)
                                {
                                    <text>@Model.UserSubjectLdh.HeartUsers[i]</text>
                                    if (i < limitcount - 1) { <text>, </text> }
                                }
                            }
                        }
                        
                        @if (totalcount > 5)
                        {
                            <text> ve @(totalcount-limitcount) kişi daha ifade bıraktı</text>
                        }
                    </div>

                </div>
            </div>

            <hr class="mt-6"/>
            
            
            <div id="comments">
                @await Component.InvokeAsync("DetailsComments")
            </div>
            
            <hr class="my-3"/>
            <div class="text-danger" id="DivError"></div>
            <div>
                @if (User.Identity.IsAuthenticated)
                {
                    <h4>Yorum Ekle</h4>
                    <form asp-action="AddComment" asp-controller="Subject" method="post">
                        <!--<div class="text-danger" asp-validation-summary="All"></div>-->
                        <input type="hidden" name="SubjectId" id="SubjectId" value="@Model.Subject.SubjectId"/>
                                    
                        <div class="col-md-12 mb-3">
                            <label class="form-label">Yorum</label>
                            <textarea type="text" name="Text" rows="3" id="Text" class="form-control"></textarea>
                        </div>
                                    
                        <div class="col-md-12 mb-3">
                            <button id="btnYorumKayit" type="button" class="btn btn-primary">Kaydet</button>
                        </div>
                    </form>
                }
                else
                {
                    <h6 class="text-primary my-4 mb-lg-5">Yorum yazmak için <a asp-action="Login" asp-controller="Account" class="text-muted">giriş yap</a></h6>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div class="card mb-4">
            <div class="card-header">Yeni konular</div>
            @await Component.InvokeAsync("LastSubjects")
        </div>
        <div class="card mb-4">
            <div class="card-header">Yeni Mesajlar</div>
            @await Component.InvokeAsync("LastComments")
        </div>
    </div>
    <div id="spinner" class="spinner" style="display: none"></div>
</div>


@section Scripts {
    
    <partial name="_Scripts"/>
    


    <script type="text/javascript">
    $(document).ready(() => {
        $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}